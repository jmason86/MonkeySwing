//
// CountDownView.m
// Generated by Core Animator version 1.0 on 3/15/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "CountDownView.h"

@interface CountDownView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation CountDownView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,1136,768)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 1136, 768);
	__scaling__.center = CGPointMake(568.0, 384.0);
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *countDown3 = [UIImageView new];
	countDown3.bounds = CGRectMake(0, 0, 534.0, 619.0);
	UIImage *imgCountDown3 = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"CountDown3.png" ofType:nil]];
	countDown3.image = imgCountDown3;
	countDown3.contentMode = UIViewContentModeCenter;
	countDown3.layer.position = CGPointMake(566.105, 380.754);
	[__scaling__ addSubview:countDown3];
	viewsByName[@"CountDown3"] = countDown3;

	UIImageView *countDown2 = [UIImageView new];
	countDown2.bounds = CGRectMake(0, 0, 512.0, 638.0);
	UIImage *imgCountDown2 = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"CountDown2.png" ofType:nil]];
	countDown2.image = imgCountDown2;
	countDown2.contentMode = UIViewContentModeCenter;
	countDown2.layer.position = CGPointMake(566.105, 380.754);
	countDown2.alpha = 0.00;
	[__scaling__ addSubview:countDown2];
	viewsByName[@"CountDown2"] = countDown2;

	UIImageView *countDown1 = [UIImageView new];
	countDown1.bounds = CGRectMake(0, 0, 245.0, 624.0);
	UIImage *imgCountDown1 = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"CountDown1.png" ofType:nil]];
	countDown1.image = imgCountDown1;
	countDown1.contentMode = UIViewContentModeCenter;
	countDown1.layer.position = CGPointMake(566.105, 380.754);
	countDown1.alpha = 0.00;
	[__scaling__ addSubview:countDown1];
	viewsByName[@"CountDown1"] = countDown1;

	self.viewsByName = viewsByName;
}

#pragma mark - CountDown

- (void)addCountDownAnimation
{
	[self addCountDownAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addCountDownAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addCountDownAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addCountDownAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addCountDownAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addCountDownAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addCountDownAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addCountDownAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *anticipateTiming = [CAMediaTimingFunction functionWithControlPoints:0.42 :-0.30 :1.00 :1.00];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 1.360;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"CountDown"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"CountDown"]];
	}

	CAKeyframeAnimation *countDown2OpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	countDown2OpacityAnimation.duration = 1.360;
	countDown2OpacityAnimation.values = @[@(0.000), @(0.000), @(1.000), @(1.000)];
	countDown2OpacityAnimation.keyTimes = @[@(0.000), @(0.331), @(0.331), @(1.000)];
	countDown2OpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
	countDown2OpacityAnimation.beginTime = beginTime;
	countDown2OpacityAnimation.fillMode = fillMode;
	countDown2OpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown2"] layer] addAnimation:countDown2OpacityAnimation forKey:@"CountDown_Opacity"];

	CAKeyframeAnimation *countDown2ScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	countDown2ScaleXAnimation.duration = 1.360;
	countDown2ScaleXAnimation.values = @[@(1.000), @(1.000), @(0.250), @(0.000), @(0.000)];
	countDown2ScaleXAnimation.keyTimes = @[@(0.000), @(0.331), @(0.654), @(0.662), @(1.000)];
	countDown2ScaleXAnimation.timingFunctions = @[linearTiming, anticipateTiming, linearTiming, linearTiming];
	countDown2ScaleXAnimation.beginTime = beginTime;
	countDown2ScaleXAnimation.fillMode = fillMode;
	countDown2ScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown2"] layer] addAnimation:countDown2ScaleXAnimation forKey:@"CountDown_ScaleX"];

	CAKeyframeAnimation *countDown2ScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	countDown2ScaleYAnimation.duration = 1.360;
	countDown2ScaleYAnimation.values = @[@(1.000), @(1.000), @(0.250), @(0.000), @(0.000)];
	countDown2ScaleYAnimation.keyTimes = @[@(0.000), @(0.331), @(0.654), @(0.662), @(1.000)];
	countDown2ScaleYAnimation.timingFunctions = @[linearTiming, anticipateTiming, linearTiming, linearTiming];
	countDown2ScaleYAnimation.beginTime = beginTime;
	countDown2ScaleYAnimation.fillMode = fillMode;
	countDown2ScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown2"] layer] addAnimation:countDown2ScaleYAnimation forKey:@"CountDown_ScaleY"];

	CAKeyframeAnimation *countDown3ScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	countDown3ScaleXAnimation.duration = 1.360;
	countDown3ScaleXAnimation.values = @[@(1.000), @(0.254), @(0.000), @(0.000)];
	countDown3ScaleXAnimation.keyTimes = @[@(0.000), @(0.324), @(0.331), @(1.000)];
	countDown3ScaleXAnimation.timingFunctions = @[anticipateTiming, linearTiming, linearTiming];
	countDown3ScaleXAnimation.beginTime = beginTime;
	countDown3ScaleXAnimation.fillMode = fillMode;
	countDown3ScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown3"] layer] addAnimation:countDown3ScaleXAnimation forKey:@"CountDown_ScaleX"];

	CAKeyframeAnimation *countDown3ScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	countDown3ScaleYAnimation.duration = 1.360;
	countDown3ScaleYAnimation.values = @[@(1.000), @(0.254), @(0.000), @(0.000)];
	countDown3ScaleYAnimation.keyTimes = @[@(0.000), @(0.324), @(0.331), @(1.000)];
	countDown3ScaleYAnimation.timingFunctions = @[anticipateTiming, linearTiming, linearTiming];
	countDown3ScaleYAnimation.beginTime = beginTime;
	countDown3ScaleYAnimation.fillMode = fillMode;
	countDown3ScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown3"] layer] addAnimation:countDown3ScaleYAnimation forKey:@"CountDown_ScaleY"];

	CAKeyframeAnimation *countDown1OpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	countDown1OpacityAnimation.duration = 1.360;
	countDown1OpacityAnimation.values = @[@(0.000), @(0.000), @(0.000), @(1.000), @(0.013), @(0.013)];
	countDown1OpacityAnimation.keyTimes = @[@(0.000), @(0.331), @(0.661), @(0.662), @(0.993), @(1.000)];
	countDown1OpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	countDown1OpacityAnimation.beginTime = beginTime;
	countDown1OpacityAnimation.fillMode = fillMode;
	countDown1OpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown1"] layer] addAnimation:countDown1OpacityAnimation forKey:@"CountDown_Opacity"];

	CAKeyframeAnimation *countDown1ScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	countDown1ScaleXAnimation.duration = 1.360;
	countDown1ScaleXAnimation.values = @[@(1.000), @(1.000), @(0.250), @(0.000)];
	countDown1ScaleXAnimation.keyTimes = @[@(0.000), @(0.662), @(0.993), @(1.000)];
	countDown1ScaleXAnimation.timingFunctions = @[linearTiming, anticipateTiming, linearTiming];
	countDown1ScaleXAnimation.beginTime = beginTime;
	countDown1ScaleXAnimation.fillMode = fillMode;
	countDown1ScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown1"] layer] addAnimation:countDown1ScaleXAnimation forKey:@"CountDown_ScaleX"];

	CAKeyframeAnimation *countDown1ScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	countDown1ScaleYAnimation.duration = 1.360;
	countDown1ScaleYAnimation.values = @[@(1.000), @(1.000), @(0.250), @(0.000)];
	countDown1ScaleYAnimation.keyTimes = @[@(0.000), @(0.662), @(0.993), @(1.000)];
	countDown1ScaleYAnimation.timingFunctions = @[linearTiming, anticipateTiming, linearTiming];
	countDown1ScaleYAnimation.beginTime = beginTime;
	countDown1ScaleYAnimation.fillMode = fillMode;
	countDown1ScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"CountDown1"] layer] addAnimation:countDown1ScaleYAnimation forKey:@"CountDown_ScaleY"];
}

- (void)removeCountDownAnimation
{
	[self.layer removeAnimationForKey:@"CountDown"];
	[[self.viewsByName[@"CountDown2"] layer] removeAnimationForKey:@"CountDown_Opacity"];
	[[self.viewsByName[@"CountDown2"] layer] removeAnimationForKey:@"CountDown_ScaleX"];
	[[self.viewsByName[@"CountDown2"] layer] removeAnimationForKey:@"CountDown_ScaleY"];
	[[self.viewsByName[@"CountDown3"] layer] removeAnimationForKey:@"CountDown_ScaleX"];
	[[self.viewsByName[@"CountDown3"] layer] removeAnimationForKey:@"CountDown_ScaleY"];
	[[self.viewsByName[@"CountDown1"] layer] removeAnimationForKey:@"CountDown_Opacity"];
	[[self.viewsByName[@"CountDown1"] layer] removeAnimationForKey:@"CountDown_ScaleX"];
	[[self.viewsByName[@"CountDown1"] layer] removeAnimationForKey:@"CountDown_ScaleY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"CountDown"];
}

@end